{"version":3,"sources":["components/ImageLinkForm/ImageLinkForm.js","components/FaceRecognition/FaceRecognition.js","App.js","index.js"],"names":["ImageLinkForm","onInputChange","onButtonSubmit","className","type","placeHolder","onChange","onClick","FaceRecognition","imageUrl","boxInfo","box","id","alt","src","map","i","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","app","Clarifai","App","apiKey","props","event","setState","input","target","value","models","predict","version","state","then","response","console","log","setRegionInfo","catch","err","calculateFaceLocation","region","region_info","bounding_box","image","document","getElementById","width","Number","height","left_col","top_row","right_col","bottom_row","data","boxArray","outputs","regions","boxData","forEach","boxInfoObject","push","drawBoundingBox","this","Component","ReactDOM","render","StrictMode"],"mappings":"0RAsBeA,G,MAnBO,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,eACtC,OACC,gCACC,mBAAGC,UAAU,mDAAb,SACC,oBAED,mBAAGA,UAAU,4BAAb,SACC,2BAED,qBAAKA,UAAU,SAAf,SACC,sBAAKA,UAAW,+BAAhB,UACC,uBAAOA,UAAU,8BAA8BC,KAAK,OAAOC,YAAY,6BAA6BC,SAAUL,IAC9G,wBAAQE,UAAU,wEAAwEI,QAASL,EAAnG,gCCGUM,G,MAfS,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,SAAeC,GAAa,EAAlBC,IAAkB,EAAbD,SACxC,OACC,qBAAKP,UAAU,aAAf,SACC,sBAAKA,UAAU,iBAAf,UACA,qBAAKS,GAAG,aAAaT,UAAU,YAAYU,IAAI,GAAGC,IAAKL,IACrDC,EAAQK,KAAM,SAACJ,EAAKK,GACrB,OACC,qBAAcb,UAAU,eAAec,MAAO,CAACC,IAAKP,EAAIQ,OAAQC,MAAOT,EAAIU,SAAUC,OAAQX,EAAIY,UAAWC,KAAMb,EAAIc,UAA3GT,a,iBCFVU,G,MAAM,IAAIC,IAASC,IAAI,CAC3BC,OAAQ,sCAmGKD,E,kDAnFb,WAAaE,GAAQ,IAAD,8BAClB,cAAMA,IAQR7B,cAAgB,SAAC8B,GACf,EAAKC,SAAU,CAACC,MAAOF,EAAMG,OAAOC,QAMpC,EAAKH,SAAU,CAACtB,QAAQ,MAhBN,EAoBpBR,eAAiB,WAMdwB,EAAIU,OACFC,QAAS,CACRzB,GAAI,mCACJ0B,QAAS,oCACT,EAAKC,MAAMN,OACZO,MAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZ,EAAKG,cAAcH,MAEpBI,OAAM,SAAAC,GAAG,OAAIJ,QAAQC,IAAI,kBAAmBG,OAnC7B,EAuCpBC,sBAAwB,SAACC,GACvB,IAAMtC,EAAUsC,EAAOC,YAAYC,aAC7BC,EAAQC,SAASC,eAAe,cAChCC,EAAQC,OAAOJ,EAAMG,OACrBE,EAASD,OAAOJ,EAAMK,QAC5B,MAAO,CACH/B,QAASf,EAAQ+C,SAAWH,EAC5BnC,OAAST,EAAQgD,QAAUF,EAC3BnC,SAAUiC,EAAS5C,EAAQiD,UAAYL,EACvC/B,UAAWiC,EAAU9C,EAAQkD,WAAaJ,IAhD5B,EAoDpBZ,cAAgB,SAACiB,GACd,IAAMC,EAAWD,EAAKE,QAAQ,GAAGF,KAAKG,QAClCC,EAAU,GACdH,EAASI,SAAU,SAAClB,GACjB,IAAIE,EAAe,EAAKH,sBAAsBC,GAC1CmB,EAAgB,CAClBvD,GAAKoC,EAAOpC,GACZa,QAASyB,EAAazB,QACtBN,OAAQ+B,EAAa/B,OACrBE,SAAU6B,EAAa7B,SACvBE,UAAW2B,EAAa3B,WAE1B0C,EAAQG,KAAKD,MAEhB,EAAKnC,SAAS,CAACtB,QAAQuD,KAlEN,EAqEpBI,gBAAkB,SAAC1D,GACjB,EAAKqB,SAAU,CAACrB,IAAKA,KApErB,EAAK4B,MAAQ,CACXN,MAAM,GACNxB,SAAS,GACTC,QAAQ,IALQ,E,0CAyEpB,WACE,OACE,sBAAKP,UAAU,MAAf,UACE,cAAC,EAAD,CAAeF,cAAeqE,KAAKrE,cAAgBC,eAAgBoE,KAAKpE,iBACxE,cAAC,EAAD,CAAiBS,IAAK2D,KAAK/B,MAAM5B,IAAKD,QAAS4D,KAAK/B,MAAM7B,QAASD,SAAU6D,KAAK/B,MAAMN,e,GA9E9EsC,a,MClBlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASC,eAAe,W","file":"static/js/main.26517758.chunk.js","sourcesContent":["import React from 'react'; \r\nimport './ImageLinkForm.css'; \r\n\r\nconst ImageLinkForm = ({onInputChange, onButtonSubmit}) => {\r\n\treturn (\r\n\t\t<div> \r\n\t\t\t<p className=\"f2 b mt5 mb2 helvetica light-purple washed-green\">\r\n\t\t\t{'[ face.detect ]'}\r\n\t\t\t</p>\r\n\t\t\t<p className=\"f4 mt1 mb5 helvetica gold\">\r\n\t\t\t{'detect faces in images'}\r\n\t\t\t</p>\r\n\t\t\t<div className='center'>\r\n\t\t\t\t<div className ='center form pa4 br3 shadow-5'> \r\n\t\t\t\t\t<input className='f4 pa2 w-70 center1 b--gold' type='text' placeHolder='Enter an image URL here ..' onChange={onInputChange} /> \r\n\t\t\t\t\t<button className='w-30 br1 b--gold ml2 f5 b link ph3 pv2 dib near-black bg-gold pointer' onClick={onButtonSubmit}> Detect </button> \r\n\t\t\t\t</div> \r\n\t\t\t</div> \r\n\t\t</div> \r\n\t); \r\n}\r\n\r\nexport default ImageLinkForm; ","import React from 'react'; \r\nimport './FaceRecognition.css';\r\n\r\nconst FaceRecognition = ({imageUrl, box, boxInfo}) => {\r\n\treturn (\r\n\t\t<div className='center mt5'>\r\n\t\t\t<div className='imageContainer'>\r\n\t\t\t<img id='inputImage' className=\"imageArea\" alt='' src={imageUrl} />\r\n\t\t\t{\tboxInfo.map ( (box, i) => {\r\n\t\t\t\treturn ( \r\n\t\t\t\t\t<div key ={i} className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div> );\r\n\t\t      })\r\n\t\t   }\r\n\t\t\t</div>\r\n\t\t</div>\t\r\n\t); \r\n}\r\n\r\nexport default FaceRecognition; \r\n\r\n","import React, {Component} from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\n// import Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\nimport './App.css';\n\nconst app = new Clarifai.App({\n  apiKey: \"35426aed9e7c48d7b630462d82d494bb\",\n});\n\n// const particleParams = {\n//   particles: {\n//     number: { \n//       density: {\n//         enable:true,\n//         value_area:800, \n//         factor:300\n//       }\n//     }\n//   }\n// }\n\nclass App extends Component {\n  constructor (props) {\n    super(props); \n    this.state = {\n      input:'', \n      imageUrl:'', \n      boxInfo:[]\n    }\n  }\n\n  onInputChange = (event) =>  {\n    this.setState( {input: event.target.value} );\n    // boxInfo needs to be initialized to empty, \n    // else the bounding boxes from previous runs gets \n    // rendered over the new image on rerun, \n    // until the new bounding boxes for new image is\n    // calculated and boxInfo is updated again. \n    this.setState( {boxInfo:[]} ); \n  }\n\n  // When button is clicked\n  onButtonSubmit = () =>  {\n    /* The imageUrl is not getting updated fast enough. \n     * this.setState({imageUrl: this.state.input});\n     * this.setState({boxInfo: []});  \n     * So we use input instead of imageUrl in Api call\n    */\n     app.models\n      .predict( { \n        id: \"a403429f2ddf4b49b307e318f00e528b\", \n        version: \"34ce21a40cc24b6b96ffee54aabff139\",},\n        this.state.input )\n      .then( response =>  {\n        console.log(response);\n        this.setRegionInfo(response);\n      })\n      .catch(err => console.log(\"Clarifai Error:\", err)); \n  }\n\n\n  calculateFaceLocation = (region) => {\n    const boxInfo = region.region_info.bounding_box; \n    const image = document.getElementById('inputImage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n        leftCol: boxInfo.left_col * width,\n        topRow : boxInfo.top_row * height,\n        rightCol: width - (boxInfo.right_col * width),\n        bottomRow: height - (boxInfo.bottom_row * height)\n    }\n  }\n\n  setRegionInfo = (data) => {\n     const boxArray = data.outputs[0].data.regions;\n     let boxData = []; \n     boxArray.forEach ( (region) => {\n        let bounding_box = this.calculateFaceLocation(region); \n        let boxInfoObject = {\n          id : region.id, \n          leftCol: bounding_box.leftCol, \n          topRow: bounding_box.topRow,\n          rightCol: bounding_box.rightCol, \n          bottomRow: bounding_box.bottomRow\n        }; \n        boxData.push(boxInfoObject);\n     });\n     this.setState({boxInfo:boxData});\n  }\n\n  drawBoundingBox = (box) => {\n    this.setState ({box: box});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ImageLinkForm onInputChange={this.onInputChange}  onButtonSubmit={this.onButtonSubmit} />\n        <FaceRecognition box={this.state.box} boxInfo={this.state.boxInfo} imageUrl={this.state.input} />\n      </div>\n    );\n  } \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons'; \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}